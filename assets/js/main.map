{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/throttle-debounce/debounce.js","node_modules/throttle-debounce/index.js","node_modules/throttle-debounce/throttle.js","src/js/main.js"],"names":["throttle","require","module","exports","delay","atBegin","callback","undefined","debounce","noTrailing","debounceMode","wrapper","exec","lastExec","Number","Date","apply","self","args","clear","timeoutID","this","elapsed","arguments","clearTimeout","setTimeout","_throttleDebounce","Meme","_classCallCheck","dom","top","document","querySelector","bottom","name","body","getAttribute","bindEvents","_this","addEventListener","_throttleDebounce2","default","updateUrl","escapeStr","textContent","history","pushState","str","encodeURIComponent","trim","replace","meme","init"],"mappings":"AAAA;ACEA,GAAIA,UAAWC,QAAQ,aAgBvBC,QAAOC,QAAU,SAAWC,EAAOC,EAASC,GAC3C,WAAoBC,KAAbD,EAAyBN,SAASI,EAAOC,GAAS,GAASL,SAASI,EAAOE,GAAsB,IAAZD;;ACnB7F,GAAIL,UAAWC,QAAQ,cACnBO,SAAWP,QAAQ,aAEvBC,QAAOC,SACNH,SAAUA,SACVQ,SAAUA;;ACaXN,OAAOC,QAAU,SAAWC,EAAOK,EAAYH,EAAUI,GAoBxD,QAASC,KAOR,QAASC,KACRC,EAAWC,OAAO,GAAIC,OACtBT,EAASU,MAAMC,EAAMC,GAKtB,QAASC,KACRC,MAAYb,GAbb,GAAIU,GAAOI,KACPC,EAAUR,OAAO,GAAIC,OAAUF,EAC/BK,EAAOK,SAcNb,KAAiBU,GAGrBR,IAIIQ,GACJI,aAAaJ,OAGQb,KAAjBG,GAA8BY,EAAUlB,EAG5CQ,KAE0B,IAAfH,IAUXW,EAAYK,WAAWf,EAAeS,EAAQP,MAAuBL,KAAjBG,EAA6BN,EAAQkB,EAAUlB,IA3DrG,GAAIgB,GAGAP,EAAW,CA8Df,OA3D2B,iBAAfJ,KACXC,EAAeJ,EACfA,EAAWG,EACXA,MAAaF,IAwDPI;;qcCxFRe,kBAAAzB,QAAA,kFAEM0B,gBACL,QAAAA,KAAcC,gBAAAP,KAAAM,GACPN,KAAKQ,KACJC,IAAKC,SAASC,cAAc,aACzBC,OAAQF,SAASC,cAAc,iBAGnCX,KAAKa,KAAOH,SAASI,KAAKC,aAAa,aACvCf,KAAKS,IAAMC,SAASI,KAAKC,aAAa,YACtCf,KAAKY,OAASF,SAASI,KAAKC,aAAa,mEAO5Cf,KAAKgB,kDAGO,GAAAC,GAAAjB,IACTA,MAAKQ,IAAIC,IAAIS,iBAAiB,QAASC,mBAAAC,QAAGjC,SAAS,IAAK,WAAA,MAAM8B,GAAKI,eACnErB,KAAKQ,IAAII,OAAOM,iBAAiB,QAASC,mBAAAC,QAAGjC,SAAS,IAAK,WAAA,MAAM8B,GAAKI,mDAItErB,KAAKS,IAAMT,KAAKsB,UAAWtB,KAAKQ,IAAIC,IAAIc,aACxCvB,KAAKY,OAASZ,KAAKsB,UAAWtB,KAAKQ,IAAII,OAAOW,aAE9CC,QAAQC,UACJ,KACA,KAFJ,IAGQzB,KAAKa,KAHb,IAGqBb,KAAKS,IAH1B,IAGiCT,KAAKY,0CAIhCc,GACT,MAAOC,oBAAoBD,EAAIE,QAASC,QAAQ,OAAQ,cAIzDC,KAAO,GAAIxB,KACfwB,MAAKC","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/* eslint-disable no-undefined */\n\nvar throttle = require('./throttle');\n\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param  {Number}   delay         A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {Boolean}  atBegin       Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                  after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                  (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n * @param  {Function} callback      A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                  to `callback` when the debounced-function is executed.\n *\n * @return {Function} A new, debounced function.\n */\nmodule.exports = function ( delay, atBegin, callback ) {\n\treturn callback === undefined ? throttle(delay, atBegin, false) : throttle(delay, callback, atBegin !== false);\n};\n","var throttle = require('./throttle');\nvar debounce = require('./debounce');\n\nmodule.exports = {\n\tthrottle: throttle,\n\tdebounce: debounce\n};\n","/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param  {Number}    delay          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {Boolean}   noTrailing     Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the\n *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time\n *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,\n *                                    the internal counter is reset)\n * @param  {Function}  callback       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                    to `callback` when the throttled-function is executed.\n * @param  {Boolean}   debounceMode   If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),\n *                                    schedule `callback` to execute after `delay` ms.\n *\n * @return {Function}  A new, throttled, function.\n */\nmodule.exports = function ( delay, noTrailing, callback, debounceMode ) {\n\n\t// After wrapper has stopped being called, this timeout ensures that\n\t// `callback` is executed at the proper times in `throttle` and `end`\n\t// debounce modes.\n\tvar timeoutID;\n\n\t// Keep track of the last time `callback` was executed.\n\tvar lastExec = 0;\n\n\t// `noTrailing` defaults to falsy.\n\tif ( typeof noTrailing !== 'boolean' ) {\n\t\tdebounceMode = callback;\n\t\tcallback = noTrailing;\n\t\tnoTrailing = undefined;\n\t}\n\n\t// The `wrapper` function encapsulates all of the throttling / debouncing\n\t// functionality and when executed will limit the rate at which `callback`\n\t// is executed.\n\tfunction wrapper () {\n\n\t\tvar self = this;\n\t\tvar elapsed = Number(new Date()) - lastExec;\n\t\tvar args = arguments;\n\n\t\t// Execute `callback` and update the `lastExec` timestamp.\n\t\tfunction exec () {\n\t\t\tlastExec = Number(new Date());\n\t\t\tcallback.apply(self, args);\n\t\t}\n\n\t\t// If `debounceMode` is true (at begin) this is used to clear the flag\n\t\t// to allow future `callback` executions.\n\t\tfunction clear () {\n\t\t\ttimeoutID = undefined;\n\t\t}\n\n\t\tif ( debounceMode && !timeoutID ) {\n\t\t\t// Since `wrapper` is being called for the first time and\n\t\t\t// `debounceMode` is true (at begin), execute `callback`.\n\t\t\texec();\n\t\t}\n\n\t\t// Clear any existing timeout.\n\t\tif ( timeoutID ) {\n\t\t\tclearTimeout(timeoutID);\n\t\t}\n\n\t\tif ( debounceMode === undefined && elapsed > delay ) {\n\t\t\t// In throttle mode, if `delay` time has been exceeded, execute\n\t\t\t// `callback`.\n\t\t\texec();\n\n\t\t} else if ( noTrailing !== true ) {\n\t\t\t// In trailing throttle mode, since `delay` time has not been\n\t\t\t// exceeded, schedule `callback` to execute `delay` ms after most\n\t\t\t// recent execution.\n\t\t\t//\n\t\t\t// If `debounceMode` is true (at begin), schedule `clear` to execute\n\t\t\t// after `delay` ms.\n\t\t\t//\n\t\t\t// If `debounceMode` is false (at end), schedule `callback` to\n\t\t\t// execute after `delay` ms.\n\t\t\ttimeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n\t\t}\n\n\t}\n\n\t// Return the wrapper function.\n\treturn wrapper;\n\n};\n","import td from 'throttle-debounce';\n\nclass Meme {\n\tconstructor() {\n        this.dom = {\n        \ttop: document.querySelector('.text.top'),\n            bottom: document.querySelector('.text.bottom')\n        };\n\n        this.name = document.body.getAttribute('data-name');\n        this.top = document.body.getAttribute('data-top');\n        this.bottom = document.body.getAttribute('data-bottom');\n    }\n\n    /**\n     * Methods\n     */\n    init() {\n    \tthis.bindEvents();\n    }\n\n    bindEvents() {\n        this.dom.top.addEventListener('keyup', td.debounce(500, () => this.updateUrl()));\n        this.dom.bottom.addEventListener('keyup', td.debounce(500, () => this.updateUrl()));\n    }\n\n    updateUrl() {\n        this.top = this.escapeStr( this.dom.top.textContent );\n        this.bottom = this.escapeStr( this.dom.bottom.textContent );\n\n        history.pushState(\n            null,\n            null,\n            `/${this.name}/${this.top}/${this.bottom}`\n        );\n    }\n\n    escapeStr(str) {\n    \treturn encodeURIComponent( str.trim() ).replace(/%20/g, '+');\n    }\n}\n\nvar meme = new Meme();\nmeme.init();"]}